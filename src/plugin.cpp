/*
 * Fledge filter mvcyclingcheck.
 *
 * Copyright (c) 2020, RTE (https://www.rte-france.com)
 *
 * Released under the Apache 2.0 Licence
 *
 * Author: Yannick Marchetaux
 * 
 */
#include <version.h>
#include <filterMvCyclingCheck.h>
#include <constantsMvCyclingCheck.h>

static const char *default_config = QUOTE({
	"plugin" : {
		"description" : "Filter that checks the cycling of the measured values",
					"type" : "string",
		"default" : FILTER_NAME,
		"readonly" : "true"
		},
	"enable": {
		"description": "A switch that can be used to enable or disable execution of the filter.",
		"displayName": "Enabled",
		"type": "boolean",
		"default": "true"
		},
	"check_period": {
		"description": "cycling check period in seconds.",
		"type": "integer",
		"default": "30",
		"order": "1",
		"displayName": "Check period"
	}
});

using namespace std;

/**
 * The Filter plugin interface
 */
extern "C" {

/**
 * The plugin information structure
 */
static PLUGIN_INFORMATION info = {
        FILTER_NAME,              // Name
        VERSION,                  // Version
        0,                        // Flags
        PLUGIN_TYPE_FILTER,       // Type
        "1.0.0",                  // Interface version
		default_config	          // Default plugin configuration
};

typedef struct
{
	FledgeFilter *handle;
	std::string	configCatName;
} FILTER_INFO;

/**
 * Return the information about this plugin
 */
PLUGIN_INFORMATION *plugin_info()
{
	return &info;
}

/**
 * Initialise the plugin, called to get the plugin handle and setup the
 * output handle that will be passed to the output stream. The output stream
 * is merely a function pointer that is called with the output handle and
 * the new set of readings generated by the plugin.
 *     (*output)(outHandle, readings);
 *
 * @param config	The configuration category for the filter
 * @param outHandle	A handle that will be passed to the output stream
 * @param output	The output stream (function pointer) to which data is passed
 * @return		An opaque handle that is used in all subsequent calls to the plugin
 */
PLUGIN_HANDLE plugin_init(ConfigCategory* config,
			  OUTPUT_HANDLE *outHandle,
			  OUTPUT_STREAM output)
{
	FilterMvCyclingCheck *filterMvCyclingCheck = new FilterMvCyclingCheck(FILTER_NAME,
                                        *config,
                                        outHandle,
                                        output);

        return (PLUGIN_HANDLE)filterMvCyclingCheck;
}

/**
 * Ingest a set of readings into the plugin for processing
 *
 * @param handle	The plugin handle returned from plugin_init
 * @param readingSet	The readings to process
 */
void plugin_ingest(PLUGIN_HANDLE *handle,
		   READINGSET *readingSet)
{
	FilterMvCyclingCheck *filterMvCyclingCheck = (FilterMvCyclingCheck *) handle;
	filterMvCyclingCheck->ingest(readingSet);
}

/**
 * Plugin reconfiguration entry point
 *
 * @param	handle	The plugin handle
 * @param	newConfig	The new configuration data
 */
void plugin_reconfigure(PLUGIN_HANDLE *handle, const string& newConfig)
{
	FilterMvCyclingCheck *filterMvCyclingCheck = (FilterMvCyclingCheck *)handle;
	filterMvCyclingCheck->reconfigure(newConfig);
}

/**
 * Call the shutdown method in the plugin
 */
void plugin_shutdown(PLUGIN_HANDLE *handle)
{
	FilterMvCyclingCheck *filterMvCyclingCheck = (FilterMvCyclingCheck *)handle;
	delete filterMvCyclingCheck;
}

// End of extern "C"
};

